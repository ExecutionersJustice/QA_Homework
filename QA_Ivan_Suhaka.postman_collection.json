{
	"info": {
		"_postman_id": "a1b906f3-67ba-49db-928d-26577c2e95bb",
		"name": "QA_Ivan_Suhaka",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// pm.test(\"Status code is 200\", function () {\r",
							"//     pm.response.to.have.status(200);\r",
							"// });\r",
							"\r",
							"\r",
							"// pm.test(\"Body matches string\", function () {\r",
							"//     pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12345",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Ivan",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let salary_check_12 = jsonData.person.u_name[1] * 2.9\r",
							"let salary_12 = jsonData.qa_salary_after_12_months\r",
							"\r",
							"console.log(salary_check_12)\r",
							"console.log(salary_12)\r",
							"\r",
							"let req = JSON.parse(request.data)\r",
							"let req_salary = req.salary\r",
							"\r",
							"console.log(\"req_salary = \", req_salary)\r",
							"\r",
							"pm.test(\"salary check\", function () {\r",
							"    pm.expect(salary_12).to.eql(salary_check_12);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 23,\r\n    \"salary\": 700,\r\n    \"name\": \"Ivan\",\r\n    \"auth_token\": \"/s34lfgbj/None/jjd909/99210kjkWpqc480712345352456evny\"\r\n}"
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Ivan\");\r",
							"});\r",
							"\r",
							"pm.test(\"Age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"23\");\r",
							"});\r",
							"\r",
							"pm.test(\"Salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(700);\r",
							"});\r",
							"\r",
							"let parsedRequest = request.data\r",
							"\r",
							"pm.test(\"Name from parsed request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(parsedRequest.name);\r",
							"});\r",
							"\r",
							"pm.test(\"Age from parsed request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(parsedRequest.age);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary from parsed request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(Number(parsedRequest.salary));\r",
							"});\r",
							"\r",
							"console.log(JSON.stringify(jsonData.family, null, 4))\r",
							"\r",
							"pm.test(\"Salary 1.5 year\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(Number(parsedRequest.salary * 4));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "700",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"// let parsedRequest_name = pm.request.url.query.get(\"name\") parsing param of GET request\r",
							"let parsedRequest = pm.request.url.query.all() // parsing all params of GET request\r",
							"\r",
							"pm.test(\"Name correspondance\", function () {\r",
							"     pm.expect(jsonData.name).to.eql(parsedRequest[0].value);\r",
							"});\r",
							"\r",
							"pm.test(\"Age correspondance\", function () {\r",
							"     pm.expect(jsonData.age).to.eql(parsedRequest[1].value);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary correspondance\", function () {\r",
							"     pm.expect(jsonData.salary).to.eql(Number(parsedRequest[2].value));\r",
							"});\r",
							"\r",
							"// pm.test(\"Name correspondance\", function () {\r",
							"//     pm.expect(jsonData.name).to.eql(pm.request.url.query.toObject().name);\r",
							"// });\r",
							"\r",
							"// pm.test(\"Age correspondance\", function () {\r",
							"//     pm.expect(jsonData.age).to.eql(pm.request.url.query.toObject().age);\r",
							"// });\r",
							"\r",
							"// pm.test(\"Salary correspondance\", function () {\r",
							"//     pm.expect(jsonData.salary).to.eql(Number(pm.request.url.query.toObject().salary));\r",
							"// });\r",
							"\r",
							"console.log(JSON.stringify(jsonData.family, null, 4))\r",
							"\r",
							"let dog = jsonData.family.pets.dog\r",
							"\r",
							"pm.test(\"Dog name exists\", function () {\r",
							"    pm.expect(dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"pm.test(\"Dog age exists\", function () {\r",
							"    pm.expect(dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"pm.test(\"Dog name is Luky\", function () {\r",
							"    pm.expect(dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Dog age is 4\", function () {\r",
							"    pm.expect(dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "23",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "700",
							"type": "text",
							"disabled": true
						},
						{
							"key": "name",
							"value": "Ivan",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Ivan&age=23&salary=700",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ivan"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "700"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let parsedRequest = pm.request.url.query.all()\r",
							"\r",
							"let requestAge = Number(parsedRequest[0].value);\r",
							"let requestName = parsedRequest[1].value;\r",
							"let requestSalary = Number(parsedRequest[2].value);\r",
							"\r",
							"\r",
							"pm.test(\"Name correspondance\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(requestName);\r",
							"});\r",
							"\r",
							"pm.test(\"Age correspondance\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(requestAge);\r",
							"});\r",
							"\r",
							"// console.log(requestSalary)\r",
							"// console.log(jsonData.salary)\r",
							"// console.log(jsonData.salary[0], jsonData.salary[1], jsonData.salary[2])\r",
							"\r",
							"pm.test(\"responseSalary[0] == requestSalary\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(requestSalary);\r",
							"});\r",
							"\r",
							"pm.test(\"responseSalary[0] == requestSalary\", function () {\r",
							"    pm.expect(Number(jsonData.salary[1])).to.eql(requestSalary * 2);\r",
							"});\r",
							"\r",
							"pm.test(\"responseSalary[0] == requestSalary\", function () {\r",
							"    pm.expect(Number(jsonData.salary[2])).to.eql(requestSalary * 3);\r",
							"});\r",
							"\r",
							"for (let i = 0; i < jsonData.salary.length; i++) {\r",
							"    console.log(Number(jsonData.salary[i]))\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "23",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "700",
							"type": "text",
							"disabled": true
						},
						{
							"key": "name",
							"value": "Ivan",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?age={{age}}&name={{name}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let parsedRequest = request.data\r",
							"\r",
							"let requestName = parsedRequest.name;\r",
							"let requestSalary = Number(parsedRequest.salary);\r",
							"let requestAge = Number(parsedRequest.age);\r",
							"\r",
							"\r",
							"pm.test(\"Start QA salary existence\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"pm.test(\"QA salary after 6 months existence\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"pm.test(\"QA salary after 12 months existence\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"pm.test(\"QA salary after 1.5 year existence\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"pm.test(\"QA salary after 3.5 years existence\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"pm.test(\"Person property existence\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"pm.test(\"Start QA salary == requestSalary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(requestSalary);\r",
							"});\r",
							"\r",
							"pm.test(\"QA salary after 6 months == requestSalary * 2\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(requestSalary * 2);\r",
							"});\r",
							"\r",
							"pm.test(\"QA salary after 12 months == requestSalary * 2.7\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(requestSalary * 2.7);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"QA salary after 1.5 year == requestSalary * 3.3\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(requestSalary * 3.3);\r",
							"});\r",
							"\r",
							"pm.test(\"QA salary after 3.5 years == requestSalary * 3.8\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(requestSalary * 3.8);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary == requestSalary\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(requestSalary);\r",
							"});\r",
							"\r",
							"pm.test(\"Age == requestAge\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(requestAge);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary after 5 years == requestSalary * 4.2\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(requestSalary * 4.2);\r",
							"});\r",
							"\r",
							"\r",
							"for (let element in jsonData.person) {\r",
							"   if (typeof jsonData.person[element] == \"number\") {\r",
							"       console.log(element + \" : \" + jsonData.person[element])\r",
							"   }\r",
							"   else if (typeof jsonData.person[element] == \"object\") {\r",
							"       for (each in jsonData.person[element]) {\r",
							"           console.log(element + \" : \" + jsonData.person[element][each])\r",
							"       }\r",
							"       \r",
							"   }\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}