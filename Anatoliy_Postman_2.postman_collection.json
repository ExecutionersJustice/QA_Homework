{
	"info": {
		"_postman_id": "fc7a931a-c086-4030-83dc-8bb12e9cf9cd",
		"name": "Anatoliy_Postman_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "case 1: all positive",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let parsedRequest = request.data\r",
							"\r",
							"let requestName = parsedRequest.name;\r",
							"let requestSalary = Number(parsedRequest.salary);\r",
							"let requestAge = Number(parsedRequest.age);\r",
							"\r",
							"const nameValidation = function(name) {\r",
							"    if (name.length >= 3 && name.length <= 40 && /^[-a-zA-Z-()]+(\\s+[-a-zA-Z0-9-()]+)*$/.test(name)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false\r",
							"    }\r",
							"}\r",
							"\r",
							"const ageValidation = function(age) {\r",
							"    if (age >= 18 && age <= 120 && Number.isInteger(age)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"const salaryValidation = function(salary) {\r",
							"    if (salary >= 1 && salary <= 1000000 && Number.isInteger(salary)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"const dataValidation = function(name, age, salary) {\r",
							"    if (name(requestName), age(requestAge), salary(requestSalary)) {\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"    }\r",
							"    else {\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"            pm.response.to.not.have.status(999);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"// if (nameValidation(requestName) && ageValidation(requestAge) && salaryValidation(requestSalary)) {\r",
							"//     pm.test(\"Positive (all entered data is correct)\", function () {\r",
							"//         pm.response.to.have.status(200);\r",
							"//     });\r",
							"// }\r",
							"// else {\r",
							"//     pm.test(\"Status code is NOT 200\", function () {\r",
							"//         pm.response.to.not.have.status(999)\r",
							"//     });\r",
							"// }\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "case 2: age negative = ''",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let parsedRequest = request.data\r",
							"\r",
							"let requestName = parsedRequest.name;\r",
							"let requestSalary = Number(parsedRequest.salary);\r",
							"let requestAge = Number(parsedRequest.age);\r",
							"\r",
							"const nameValidation = function(name) {\r",
							"    if (name.length >= 3 && name.length <= 40 && /^[^\\s]+(\\s+[^\\s]+)*$/.test(name)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false\r",
							"    }\r",
							"}\r",
							"\r",
							"const ageValidation = function(age) {\r",
							"    if (age >= 18 && age <= 120 && Number.isInteger(age)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"const salaryValidation = function(salary) {\r",
							"    if (salary >= 1 && salary <= 1000000 && Number.isInteger(salary)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"if (nameValidation(requestName) && ageValidation(requestAge) && salaryValidation(requestSalary)) {\r",
							"    pm.test(\"Positive (all entered data is correct)\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Status code is NOT 200\", function () {\r",
							"        pm.response.to.not.have.status(999)\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "age",
							"value": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "case 3: age negative = 17",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let parsedRequest = request.data\r",
							"\r",
							"let requestName = parsedRequest.name;\r",
							"let requestSalary = Number(parsedRequest.salary);\r",
							"let requestAge = Number(parsedRequest.age);\r",
							"\r",
							"const nameValidation = function(name) {\r",
							"    if (name.length >= 3 && name.length <= 40 && /^[^\\s]+(\\s+[^\\s]+)*$/.test(name)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false\r",
							"    }\r",
							"}\r",
							"\r",
							"const ageValidation = function(age) {\r",
							"    if (age >= 18 && age <= 120 && Number.isInteger(age)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"const salaryValidation = function(salary) {\r",
							"    if (salary >= 1 && salary <= 1000000 && Number.isInteger(salary)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"if (nameValidation(requestName) && ageValidation(requestAge) && salaryValidation(requestSalary)) {\r",
							"    pm.test(\"Positive (all entered data is correct)\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Status code is NOT 200\", function () {\r",
							"        pm.response.to.not.have.status(999)\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "age",
							"value": "17",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "case 4: age negative 17.9",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let parsedRequest = request.data\r",
							"\r",
							"let requestName = parsedRequest.name;\r",
							"let requestSalary = Number(parsedRequest.salary);\r",
							"let requestAge = Number(parsedRequest.age);\r",
							"\r",
							"const nameValidation = function(name) {\r",
							"    if (name.length >= 3 && name.length <= 40 && /^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/.test(name)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false\r",
							"    }\r",
							"}\r",
							"\r",
							"const ageValidation = function(age) {\r",
							"    if (age >= 18 && age <= 120 && Number.isInteger(age)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"const salaryValidation = function(salary) {\r",
							"    if (salary >= 1 && salary <= 1000000 && Number.isInteger(salary)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"if (nameValidation(requestName) && ageValidation(requestAge) && salaryValidation(requestSalary)) {\r",
							"    pm.test(\"Positive (all entered data is correct)\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Status code is NOT 200\", function () {\r",
							"        pm.response.to.not.have.status(999)\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "age",
							"value": "17.9",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "case 5: age negative 121",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let parsedRequest = request.data\r",
							"\r",
							"let requestName = parsedRequest.name;\r",
							"let requestSalary = Number(parsedRequest.salary);\r",
							"let requestAge = Number(parsedRequest.age);\r",
							"\r",
							"const nameValidation = function(name) {\r",
							"    if (name.length >= 3 && name.length <= 40 && /^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/.test(name)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false\r",
							"    }\r",
							"}\r",
							"\r",
							"const ageValidation = function(age) {\r",
							"    if (age >= 18 && age <= 120 && Number.isInteger(age)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"const salaryValidation = function(salary) {\r",
							"    if (salary >= 1 && salary <= 1000000 && Number.isInteger(salary)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"if (nameValidation(requestName) && ageValidation(requestAge) && salaryValidation(requestSalary)) {\r",
							"    pm.test(\"Positive (all entered data is correct)\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Status code is NOT 200\", function () {\r",
							"        pm.response.to.not.have.status(999)\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "age",
							"value": "121",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "case 6: age negative 120.1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let parsedRequest = request.data\r",
							"\r",
							"let requestName = parsedRequest.name;\r",
							"let requestSalary = Number(parsedRequest.salary);\r",
							"let requestAge = Number(parsedRequest.age);\r",
							"\r",
							"const nameValidation = function(name) {\r",
							"    if (name.length >= 3 && name.length <= 40 && /^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/.test(name)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false\r",
							"    }\r",
							"}\r",
							"\r",
							"const ageValidation = function(age) {\r",
							"    if (age >= 18 && age <= 120 && Number.isInteger(age)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"const salaryValidation = function(salary) {\r",
							"    if (salary >= 1 && salary <= 1000000 && Number.isInteger(salary)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"if (nameValidation(requestName) && ageValidation(requestAge) && salaryValidation(requestSalary)) {\r",
							"    pm.test(\"Positive (all entered data is correct)\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Status code is NOT 200\", function () {\r",
							"        pm.response.to.not.have.status(999)\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "age",
							"value": "120.1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "case 7: salary negative = ''",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let parsedRequest = request.data\r",
							"\r",
							"let requestName = parsedRequest.name;\r",
							"let requestSalary = Number(parsedRequest.salary);\r",
							"let requestAge = Number(parsedRequest.age);\r",
							"\r",
							"const nameValidation = function(name) {\r",
							"    if (name.length >= 3 && name.length <= 40 && /^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/.test(name)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false\r",
							"    }\r",
							"}\r",
							"\r",
							"const ageValidation = function(age) {\r",
							"    if (age >= 18 && age <= 120 && Number.isInteger(age)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"const salaryValidation = function(salary) {\r",
							"    if (salary >= 1 && salary <= 1000000 && Number.isInteger(salary)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"if (nameValidation(requestName) && ageValidation(requestAge) && salaryValidation(requestSalary)) {\r",
							"    pm.test(\"Positive (all entered data is correct)\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Status code is NOT 200\", function () {\r",
							"        pm.response.to.not.have.status(999)\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "case 8: salary negative = 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let parsedRequest = request.data\r",
							"\r",
							"let requestName = parsedRequest.name;\r",
							"let requestSalary = Number(parsedRequest.salary);\r",
							"let requestAge = Number(parsedRequest.age);\r",
							"\r",
							"const nameValidation = function(name) {\r",
							"    if (name.length >= 3 && name.length <= 40 && /^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/.test(name)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false\r",
							"    }\r",
							"}\r",
							"\r",
							"const ageValidation = function(age) {\r",
							"    if (age >= 18 && age <= 120 && Number.isInteger(age)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"const salaryValidation = function(salary) {\r",
							"    if (salary >= 1 && salary <= 1000000 && Number.isInteger(salary)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"if (nameValidation(requestName) && ageValidation(requestAge) && salaryValidation(requestSalary)) {\r",
							"    pm.test(\"Positive (all entered data is correct)\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Status code is NOT 200\", function () {\r",
							"        pm.response.to.not.have.status(999)\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "0",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "case 9: salary negative = 0.5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let parsedRequest = request.data\r",
							"\r",
							"let requestName = parsedRequest.name;\r",
							"let requestSalary = Number(parsedRequest.salary);\r",
							"let requestAge = Number(parsedRequest.age);\r",
							"\r",
							"const nameValidation = function(name) {\r",
							"    if (name.length >= 3 && name.length <= 40 && /^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/.test(name)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false\r",
							"    }\r",
							"}\r",
							"\r",
							"const ageValidation = function(age) {\r",
							"    if (age >= 18 && age <= 120 && Number.isInteger(age)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"const salaryValidation = function(salary) {\r",
							"    if (salary >= 1 && salary <= 1000000 && Number.isInteger(salary)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"if (nameValidation(requestName) && ageValidation(requestAge) && salaryValidation(requestSalary)) {\r",
							"    pm.test(\"Positive (all entered data is correct)\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Status code is NOT 200\", function () {\r",
							"        pm.response.to.not.have.status(999)\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "0.5",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "case 10: salary negative = 1000001",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let parsedRequest = request.data\r",
							"\r",
							"let requestName = parsedRequest.name;\r",
							"let requestSalary = Number(parsedRequest.salary);\r",
							"let requestAge = Number(parsedRequest.age);\r",
							"\r",
							"const nameValidation = function(name) {\r",
							"    if (name.length >= 3 && name.length <= 40 && /^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/.test(name)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false\r",
							"    }\r",
							"}\r",
							"\r",
							"const ageValidation = function(age) {\r",
							"    if (age >= 18 && age <= 120 && Number.isInteger(age)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"const salaryValidation = function(salary) {\r",
							"    if (salary >= 1 && salary <= 1000000 && Number.isInteger(salary)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"if (nameValidation(requestName) && ageValidation(requestAge) && salaryValidation(requestSalary)) {\r",
							"    pm.test(\"Positive (all entered data is correct)\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Status code is NOT 200\", function () {\r",
							"        pm.response.to.not.have.status(999)\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000001",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "case 11: salary negative = 1000000.1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let parsedRequest = request.data\r",
							"\r",
							"let requestName = parsedRequest.name;\r",
							"let requestSalary = Number(parsedRequest.salary);\r",
							"let requestAge = Number(parsedRequest.age);\r",
							"\r",
							"const nameValidation = function(name) {\r",
							"    if (name.length >= 3 && name.length <= 40 && /^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/.test(name)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false\r",
							"    }\r",
							"}\r",
							"\r",
							"const ageValidation = function(age) {\r",
							"    if (age >= 18 && age <= 120 && Number.isInteger(age)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"const salaryValidation = function(salary) {\r",
							"    if (salary >= 1 && salary <= 1000000 && Number.isInteger(salary)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"if (nameValidation(requestName) && ageValidation(requestAge) && salaryValidation(requestSalary)) {\r",
							"    pm.test(\"Positive (all entered data is correct)\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Status code is NOT 200\", function () {\r",
							"        pm.response.to.not.have.status(999)\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000000.1",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "case 12: name negative = ''",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let parsedRequest = request.data\r",
							"\r",
							"let requestName = parsedRequest.name;\r",
							"let requestSalary = Number(parsedRequest.salary);\r",
							"let requestAge = Number(parsedRequest.age);\r",
							"\r",
							"const nameValidation = function(name) {\r",
							"    if (name.length >= 3 && name.length <= 40 && /^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/.test(name)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false\r",
							"    }\r",
							"}\r",
							"\r",
							"const ageValidation = function(age) {\r",
							"    if (age >= 18 && age <= 120 && Number.isInteger(age)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"const salaryValidation = function(salary) {\r",
							"    if (salary >= 1 && salary <= 1000000 && Number.isInteger(salary)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"if (nameValidation(requestName) && ageValidation(requestAge) && salaryValidation(requestSalary)) {\r",
							"    pm.test(\"Positive (all entered data is correct)\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Status code is NOT 200\", function () {\r",
							"        pm.response.to.not.have.status(999)\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "case 13: name negative = \" Ivan\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let parsedRequest = request.data\r",
							"\r",
							"let requestName = parsedRequest.name;\r",
							"let requestSalary = Number(parsedRequest.salary);\r",
							"let requestAge = Number(parsedRequest.age);\r",
							"\r",
							"const nameValidation = function(name) {\r",
							"    if (name.length >= 3 && name.length <= 40 && /^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/.test(name)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false\r",
							"    }\r",
							"}\r",
							"\r",
							"const ageValidation = function(age) {\r",
							"    if (age >= 18 && age <= 120 && Number.isInteger(age)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"const salaryValidation = function(salary) {\r",
							"    if (salary >= 1 && salary <= 1000000 && Number.isInteger(salary)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"if (nameValidation(requestName) && ageValidation(requestAge) && salaryValidation(requestSalary)) {\r",
							"    pm.test(\"Positive (all entered data is correct)\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Status code is NOT 200\", function () {\r",
							"        pm.response.to.not.have.status(999)\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": " Ivan",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "case 14: name negative = \" Ivan \"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let parsedRequest = request.data\r",
							"\r",
							"let requestName = parsedRequest.name;\r",
							"let requestSalary = Number(parsedRequest.salary);\r",
							"let requestAge = Number(parsedRequest.age);\r",
							"\r",
							"const nameValidation = function(name) {\r",
							"    if (name.length >= 3 && name.length <= 40 && /^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/.test(name)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false\r",
							"    }\r",
							"}\r",
							"\r",
							"const ageValidation = function(age) {\r",
							"    if (age >= 18 && age <= 120 && Number.isInteger(age)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"const salaryValidation = function(salary) {\r",
							"    if (salary >= 1 && salary <= 1000000 && Number.isInteger(salary)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"if (nameValidation(requestName) && ageValidation(requestAge) && salaryValidation(requestSalary)) {\r",
							"    pm.test(\"Positive (all entered data is correct)\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Status code is NOT 200\", function () {\r",
							"        pm.response.to.not.have.status(999)\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan ",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "case 15: name negative = \"Iv\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let parsedRequest = request.data\r",
							"\r",
							"let requestName = parsedRequest.name;\r",
							"let requestSalary = Number(parsedRequest.salary);\r",
							"let requestAge = Number(parsedRequest.age);\r",
							"\r",
							"const nameValidation = function(name) {\r",
							"    if (name.length >= 3 && name.length <= 40 && /^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/.test(name)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false\r",
							"    }\r",
							"}\r",
							"\r",
							"const ageValidation = function(age) {\r",
							"    if (age >= 18 && age <= 120 && Number.isInteger(age)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"const salaryValidation = function(salary) {\r",
							"    if (salary >= 1 && salary <= 1000000 && Number.isInteger(salary)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"if (nameValidation(requestName) && ageValidation(requestAge) && salaryValidation(requestSalary)) {\r",
							"    pm.test(\"Positive (all entered data is correct)\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Status code is NOT 200\", function () {\r",
							"        pm.response.to.not.have.status(999)\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Iv",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "case 16: name negative = >40 chars",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let parsedRequest = request.data\r",
							"\r",
							"let requestName = parsedRequest.name;\r",
							"let requestSalary = Number(parsedRequest.salary);\r",
							"let requestAge = Number(parsedRequest.age);\r",
							"\r",
							"const nameValidation = function(name) {\r",
							"    if (name.length >= 3 && name.length <= 40 && /^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/.test(name)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false\r",
							"    }\r",
							"}\r",
							"\r",
							"const ageValidation = function(age) {\r",
							"    if (age >= 18 && age <= 120 && Number.isInteger(age)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"const salaryValidation = function(salary) {\r",
							"    if (salary >= 1 && salary <= 1000000 && Number.isInteger(salary)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"if (nameValidation(requestName) && ageValidation(requestAge) && salaryValidation(requestSalary)) {\r",
							"    pm.test(\"Positive (all entered data is correct)\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Status code is NOT 200\", function () {\r",
							"        pm.response.to.not.have.status(999)\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaan",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "case 17: name negative = \"Ivan Suhaka\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let parsedRequest = request.data\r",
							"\r",
							"let requestName = parsedRequest.name;\r",
							"let requestSalary = Number(parsedRequest.salary);\r",
							"let requestAge = Number(parsedRequest.age);\r",
							"\r",
							"const nameValidation = function(name) {\r",
							"    if (name.length >= 3 && name.length <= 40 && /^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/.test(name)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false\r",
							"    }\r",
							"}\r",
							"\r",
							"const ageValidation = function(age) {\r",
							"    if (age >= 18 && age <= 120 && Number.isInteger(age)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"const salaryValidation = function(salary) {\r",
							"    if (salary >= 1 && salary <= 1000000 && Number.isInteger(salary)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"if (nameValidation(requestName) && ageValidation(requestAge) && salaryValidation(requestSalary)) {\r",
							"    pm.test(\"Positive (all entered data is correct)\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Status code is NOT 200\", function () {\r",
							"        pm.response.to.not.have.status(999)\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan Suhaka",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "case 18: name negative = \"Iv@n\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let parsedRequest = request.data\r",
							"\r",
							"let requestName = parsedRequest.name;\r",
							"let requestSalary = Number(parsedRequest.salary);\r",
							"let requestAge = Number(parsedRequest.age);\r",
							"\r",
							"const nameValidation = function(name) {\r",
							"    if (name.length >= 3 && name.length <= 40 && /^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/.test(name)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false\r",
							"    }\r",
							"}\r",
							"\r",
							"const ageValidation = function(age) {\r",
							"    if (age >= 18 && age <= 120 && Number.isInteger(age)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"const salaryValidation = function(salary) {\r",
							"    if (salary >= 1 && salary <= 1000000 && Number.isInteger(salary)) {\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false;\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"if (nameValidation(requestName) && ageValidation(requestAge) && salaryValidation(requestSalary)) {\r",
							"    pm.test(\"Positive (all entered data is correct)\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Status code is NOT 200\", function () {\r",
							"        pm.response.to.not.have.status(999)\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Iv@n",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}